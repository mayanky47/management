import React, { useEffect, useState, useMemo } from "react";
import { Link, useNavigate, useLocation } from 'react-router-dom'; // <-- Added useLocation
import { Toaster, toast } from 'sonner';
import { Plus, ListChecks, LayoutDashboard } from 'lucide-react'; 

// --- INTERFACE DEFINITIONS ---
interface Project {
Â  name: string;
Â  type: string;
Â  path?: string;
}

interface ProjectPackage {
Â  name: string;
Â  purpose?: string;
Â  status?: string; // e.g., 'Draft', 'InProgress', 'Completed'
Â  priority?: string; // e.g., 'High', 'Medium', 'Low'
Â  dueDate?: string;
Â  projects?: Project[];
}

// --- CONSTANTS ---
const API_BASE = "http://localhost:8080/api";
const ALL_PACKAGE_STATUSES = ['Draft', 'InProgress', 'Completed', 'Archived'];
const ALL_PRIORITIES = ['High', 'Medium', 'Low'];

// --- COMPONENTS ---

// Simple Card Component for a Project Package
const PackageCard: React.FC<{ pkg: ProjectPackage; onOpen: () => void }> = ({ pkg, onOpen }) => (
Â  Â  <div 
Â  Â  Â  Â  className="bg-white p-5 rounded-xl shadow-md hover:shadow-lg transition cursor-pointer border border-gray-200"
Â  Â  Â  Â  onClick={onOpen}
Â  Â  >
Â  Â  Â  Â  <h3 className="text-xl font-bold text-gray-800 truncate">{pkg.name}</h3>
Â  Â  Â  Â  <span className={`inline-block text-xs font-medium px-2 py-0.5 rounded-full mt-1 ${
Â  Â  Â  Â  Â  Â  pkg.status === 'Completed' ? 'bg-green-100 text-green-800' :
Â  Â  Â  Â  Â  Â  pkg.status === 'InProgress' ? 'bg-blue-100 text-blue-800' :
Â  Â  Â  Â  Â  Â  'bg-gray-100 text-gray-600'
Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  {pkg.status || 'Draft'}
Â  Â  Â  Â  </span>
Â  Â  Â  Â  <p className="text-sm text-gray-500 mt-2 line-clamp-2">{pkg.purpose || 'No purpose defined.'}</p>
Â  Â  Â  Â  <div className="mt-3 text-sm flex justify-between items-center text-gray-600">
Â  Â  Â  Â  Â  Â  <span className="font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  {pkg.projects?.length || 0} Project{pkg.projects?.length !== 1 ? 's' : ''}
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  {pkg.dueDate && <span className="text-xs">Due: {pkg.dueDate}</span>}
Â  Â  Â  Â  </div>
Â  Â  </div>
);

// --- NAVIGATION HEADER COMPONENT (with corrected /board link) ---
const NavigationHeader: React.FC<{ activePath: string }> = ({ activePath }) => {
Â  Â  const navItemClass = "flex items-center px-4 py-2 rounded-lg transition-colors hover:bg-blue-50 text-gray-700 hover:text-blue-600";
Â  Â  const activeItemClass = "bg-blue-100 text-blue-700 font-semibold shadow-inner";

Â  Â  return (
Â  Â  Â  Â  <header className="bg-white shadow-sm sticky top-0 z-10 border-b border-gray-100">
Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center h-16">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-2xl font-extrabold text-blue-600">Project Manager</div>
Â  Â  Â  Â  Â  Â  Â  Â  <nav className="flex space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Link to the PackagePage (Root '/') */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to="/" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${navItemClass} ${activePath === '/' ? activeItemClass : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ListChecks className="w-5 h-5 mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Packages
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
                
                  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Link to the DashboardPage - '/dashboard' */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to="/dashboard" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${navItemClass} ${activePath === '/dashboard' ? activeItemClass : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <LayoutDashboard className="w-5 h-5 mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Dashboard
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  </nav>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </header>
Â  Â  );
};


// --- MAIN PAGE COMPONENT ---
const PackagePage: React.FC = () => {
Â  const [packages, setPackages] = useState<ProjectPackage[]>([]);
Â  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
Â  const [searchTerm, setSearchTerm] = useState('');
Â  const navigate = useNavigate(); 
  const location = useLocation(); // Use useLocation to get the current path
Â  
Â  // To highlight the active page in the header
Â  const activePath = location.pathname;

Â  // State for the new package creation
Â  const [newPackageData, setNewPackageData] = useState<ProjectPackage>({
Â  Â  name: "",
Â  Â  purpose: "",
Â  Â  status: ALL_PACKAGE_STATUSES[0],
Â  Â  priority: ALL_PRIORITIES[0],
Â  Â  projects: [],
Â  });
Â  const [newProject, setNewProject] = useState<Project>({ name: "", type: "React" });

Â  // --- Data Fetching (omitted for brevity) ---
Â  const fetchPackages = async () => {
Â  Â  try {
Â  Â  Â  const response = await fetch(`${API_BASE}/packages`);
Â  Â  Â  if (!response.ok) throw new Error('Network response was not ok');
Â  Â  Â  const data = await response.json();
Â  Â  Â  setPackages(data);
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error fetching packages:", error);
Â  Â  Â  toast.error("Failed to load packages.");
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  fetchPackages();
Â  }, []);
Â  Â  
Â  // --- Filtering Logic (omitted for brevity) ---
Â  const filteredPackages = useMemo(() => {
Â  Â  if (!searchTerm) return packages;
Â  Â  const lowerSearch = searchTerm.toLowerCase();
Â  Â  return packages.filter(pkg => 
Â  Â  Â  Â  pkg.name.toLowerCase().includes(lowerSearch) ||
Â  Â  Â  Â  pkg.purpose?.toLowerCase().includes(lowerSearch) ||
Â  Â  Â  Â  pkg.projects?.some(p => p.name.toLowerCase().includes(lowerSearch))
Â  Â  );
Â  }, [packages, searchTerm]);

Â  // --- Handlers ---
Â  const addProjectToPackage = () => {
Â  Â  if (!newProject.name) return toast.error("Project name cannot be empty.");
Â  Â  
Â  Â  setNewPackageData(prev => {
Â  Â  Â  Â  const updatedProjects = [...(prev.projects || []), { ...newProject }];
Â  Â  Â  Â  return { ...prev, projects: updatedProjects };
Â  Â  });
Â  Â  setNewProject({ name: "", type: "React" });
Â  };

Â  const resetNewPackageData = () => {
    setNewPackageData({ 
        name: "", 
        purpose: "", 
        status: ALL_PACKAGE_STATUSES[0], 
        priority: ALL_PRIORITIES[0], 
        projects: [] 
    });
    setNewProject({ name: "", type: "React" });
  }

  // Modified to include default projects and use reset function
Â  const createPackage = async () => {
Â  Â  if (!newPackageData.name) return toast.error("Package name is required.");

    // --- ðŸŽ¯ NEW LOGIC: Inject Default Projects ---
    const packageName = newPackageData.name;
    const defaultProjects: Project[] = [
        { name: `${packageName}-frontend`, type: 'React' },
        { name: `${packageName}-backend`, type: 'Spring' },
    ];
    
    // Combine existing user-added projects with defaults
    const finalProjects = [...defaultProjects, ...(newPackageData.projects || [])];
    const dataToSend = { ...newPackageData, projects: finalProjects };
    // --- ðŸŽ¯ END NEW LOGIC ---

Â  Â  try {
Â  Â  Â  const response = await fetch(`${API_BASE}/packages`, {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify(dataToSend), // Send combined data
Â  Â  Â  });

Â  Â  Â  if (response.ok) {
Â  Â  Â  Â  const createdPackage = await response.json();
Â  Â  Â  Â  setPackages(prev => [...prev, createdPackage]);
Â  Â  Â  Â  resetNewPackageData(); // Reset state
Â  Â  Â  Â  setIsCreateModalOpen(false);
Â  Â  Â  Â  toast.success(`Package '${createdPackage.name}' created successfully (with defaults)!`);
Â  Â  Â  } else {
Â  Â  Â  Â  const errorMsg = await response.text();
Â  Â  Â  Â  toast.error("Error creating package: " + errorMsg);
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error creating package:", error);
Â  Â  Â  toast.error("An unexpected error occurred during creation.");
Â  Â  }
Â  };
Â  Â  
Â  const handleOpenDetails = (pkg: ProjectPackage) => {
Â  Â  Â  if (pkg.projects && pkg.projects.length > 0) {
Â  Â  Â  Â  Â  navigate(`/package/${encodeURIComponent(pkg.name)}`);
Â  Â  Â  } else {
Â  Â  Â  Â  Â  toast.info(`No projects in ${pkg.name}. Opening package details...`);
Â  Â  Â  }
Â  }
  
  // Adjusted modal close handler
  const handleCloseModal = () => {
    resetNewPackageData();
    setIsCreateModalOpen(false);
  }

Â  return (
Â  Â  <div className="min-h-screen bg-gray-50">
Â  Â  Â  <NavigationHeader activePath={activePath} />
Â  Â  Â  <Toaster position="top-right" richColors />

Â  Â  Â  <div className="p-4 md:p-8 max-w-7xl mx-auto">
Â  Â  
Â  Â  Â  {/* --- Header/Toolbar Area --- */}
Â  Â  Â  <div className="flex justify-between items-center mb-6">
Â  Â  Â  Â  <h1 className="text-3xl font-extrabold text-gray-900">Project Packages ðŸ“¦</h1>
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => {
              resetNewPackageData();
              setIsCreateModalOpen(true);
            }}
Â  Â  Â  Â  Â  className="flex items-center bg-blue-600 text-white px-4 py-2 rounded-xl shadow-lg hover:bg-blue-700 transition"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Plus className="w-5 h-5 mr-1" />
Â  Â  Â  Â  Â  Create Package
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  {/* --- Filter/Search Area (omitted for brevity) --- */}

Â  Â  Â  {/* --- List Packages (Grid View) (omitted for brevity) --- */}
      {/* ... (filteredPackages.map(PackageCard) here) ... */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
Â  Â  Â  Â  {filteredPackages.map((pkg) => (
Â  Â  Â  Â  Â  <PackageCard key={pkg.name} pkg={pkg} onOpen={() => handleOpenDetails(pkg)} />
Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  {filteredPackages.length === 0 && (
Â  Â  Â  Â  Â  Â  Â  <p className="col-span-full text-center text-gray-500 py-10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  No packages found matching your search.
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  Â  
Â  Â  Â  {/* --- Create Package Modal --- */}
Â  Â  Â  {isCreateModalOpen && (
Â  Â  Â  Â  Â  <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-lg max-h-[90vh] overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-4 border-b pb-2">Create New Package</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Package Details */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mb-4 space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Package Name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={newPackageData.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewPackageData({ ...newPackageData, name: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 p-3 rounded-lg"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ... (purpose, status, priority inputs) ... */}
                      <textarea
                          placeholder="Purpose/Description (Optional)"
                          value={newPackageData.purpose}
                          onChange={(e) => setNewPackageData({ ...newPackageData, purpose: e.target.value })}
                          className="w-full border border-gray-300 p-3 rounded-lg resize-none"
                          rows={3}
                      />
                      <div className="flex gap-4">
                          <select
                              value={newPackageData.status}
                              onChange={(e) => setNewPackageData({ ...newPackageData, status: e.target.value })}
                              className="border border-gray-300 p-3 rounded-lg flex-1"
                          >
                              {ALL_PACKAGE_STATUSES.map(s => <option key={s} value={s}>{s}</option>)}
                          </select>
                          <select
                              value={newPackageData.priority}
                              onChange={(e) => setNewPackageData({ ...newPackageData, priority: e.target.value })}
                              className="border border-gray-300 p-3 rounded-lg flex-1"
                          >
                              {ALL_PRIORITIES.map(p => <option key={p} value={p}>{p}</option>)}
                          </select>
                      </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Add Projects Section */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="border-t pt-4 mt-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-3">Add Additional Projects (Defaults will be added automatically)</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex gap-2 mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ... (new project inputs) ... */}
                          <input
                              type="text"
                              placeholder="Project Name"
                              value={newProject.name}
                              onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
                              className="border border-gray-300 p-2 rounded-lg flex-1"
                          />
                          <select
                              value={newProject.type}
                              onChange={(e) => setNewProject({ ...newProject, type: e.target.value })}
                              className="border border-gray-300 p-2 rounded-lg"
                          >
                              <option value="React">React</option>
                              <option value="Spring">Spring</option>
                              <option value="Other">Other</option>
                          </select>
                          <button onClick={addProjectToPackage} className="bg-blue-500 text-white px-3 py-1 rounded-lg hover:bg-blue-600 transition">
                              Add
                          </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="max-h-24 overflow-y-auto border p-2 rounded-lg bg-gray-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul className="text-sm space-y-1">
                              {/* Displaying Projects to be included */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {newPackageData.projects?.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li className="text-gray-500">No additional projects added.</li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  newPackageData.projects?.map((p, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={idx} className="flex justify-between items-center bg-white p-1 rounded-md shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{p.name}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-0.5 rounded-full">{p.type}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
                              <li className="text-gray-500 italic mt-2">
                                  Default projects ({newPackageData.name}-frontend and {newPackageData.name}-backend) will be added automatically on create.
                              </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Action Buttons */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-end gap-3 mt-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleCloseModal} className="bg-gray-200 text-gray-800 px-4 py-2 rounded-xl hover:bg-gray-300 transition">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={createPackage} className="bg-green-600 text-white px-4 py-2 rounded-xl hover:bg-green-700 transition">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Create Package
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  Â  </div>
Â  );
};

export default PackagePage;